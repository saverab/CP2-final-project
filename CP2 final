let font,
  fontsize = 40;

let displayTableSize = 0;
let twitterDataTable = [];
let lengthOfTwitterTable = 0;
let popDataTable = []; // array of popular data for 1 time event 
let singleTag = '';


//let twitterSearchText = 'food'
let twitterSearchText = 'word'


var consumerKey = 'a2WdQx7kTTQoCbxcEuo8M6WKp';
var consumerSecret = 'RrQBfNihQ3c6oEqUtg2cfid7seee0Jway9JnmpSeFzDvNzipNo';

var token = '1204249168656527360-TCRUI6CbM59fQ8WFVakF2OfVZueBES';
var tokenSecret = '4UINCt8PeDXFOtKZ6nlRPNAYRai9xiiNgKqTf0TZ89ES9';

var cb = new Codebird();

class displayData {
  constructor() {
    this.name = '';
    this.hits = 0;
    this.ranking = 0;
    this.fontSize = 0;

    this.fontColorR = 0;
    this.fontColorG = 0;
    this.fontColorB = 0;

    this.distanceFromTop = 30;
    this.leftPosition = 20;
  }
}

function RequestTwitterData() {
  var params = {
    //    q: twitterSearchKey,
    q: twitterSearchText,
    result_type: 'recent',
    count: 200
  };
  cb.__call(
    "search_tweets",
    params,
    function(reply) {

      var statuses = reply.statuses.filter(s => s.text.indexOf('#' >= 0));
      print("found", statuses);
      for (var i = 0; i < statuses.length; i++) {

        var hashtags = statuses[i].text.split(/[^\w\#]/).filter(s => s[0] == "#" && s.toLowerCase() != "#"+twitterSearchText);

        singleTag = hashtags[0];

        if (singleTag != null) {
          twitterDataTable.push(singleTag);
          lengthOfTwitterTable++;
        }

        var tweet = statuses[i];
        if (!tweet.retweeted_status) {

        }
      }

      removeDuplicates();
      calculateFormat();


    }
  );
}



let displayDisplayTableRow = 1;
let twitterDataRow = 0;
let isDuplicate = false;

function removeDuplicates() {

  popDataTable.push(new displayData);
  popDataTable[0].name = twitterDataTable[0];
  displayTableSize = 1;

  twitterDataRow = 1;

  while (twitterDataRow <= lengthOfTwitterTable) {
    isDuplicate = false;

    for (let i = 0; i < displayTableSize; i++) {
      if (twitterDataTable[twitterDataRow] == popDataTable[i].name)
        isDuplicate = true;
      popDataTable[i].hits++;
    }

    if (isDuplicate == false) {
      popDataTable.push(new displayData);
      popDataTable[displayTableSize].name = twitterDataTable[twitterDataRow];
      displayTableSize++;
    }

    twitterDatRow = twitterDataRow++;
  }
}


function calculateFormat() {
  for (let i = 0; i < displayTableSize; i++) {
    popDataTable[i].fontColorR = random(256);
    popDataTable[i].fontColorG = random(256);
    popDataTable[i].fontColorB = random(256);

    if (popDataTable[i].hits < 10) {
      popDataTable[i].fontSize = 10;
    } else if (popDataTable[i].hits < 20) {
      popDataTable[i].fontSize = 12;
    } else if (popDataTable[i].hits < 30) {
      popDataTable[i].fontSize = 14;
    } else 
      popDataTable[i].fontSize = 16;

    popDataTable[i].distanceFromTop = 30 + i * 25;

  }
}

function doTwitterSearchAgain() {
  twitterSearchText = twitterSearchInputBox.value();
  print("searching for", twitterSearchText);

  displayTableSize = 0;
  lengthOfTwitterTable = 0;
  twitterDataTable = [];
  popDataTable = []; 

  cb = new Codebird();
  
  cb.setConsumerKey(consumerKey, consumerSecret);
  cb.setToken(token, tokenSecret);

  RequestTwitterData();

}

function setup() {

  createCanvas(600, 600);

  twitterSearchInputBox = createInput('fashion');
  twitterSearchInputBox.position(250, 80);

  searchKeySubmitButton = createButton('Submit');
  searchKeySubmitButton.position(twitterSearchInputBox.x + twitterSearchInputBox.width, twitterSearchInputBox.y);
  searchKeySubmitButton.mousePressed(doTwitterSearchAgain);

  for (let i = 0; i < displayTableSize; i++) {
    popDataTable.push(new popDataEntry());
  }

}

function draw() {
background(255);
  
    textSize(20);
    text('Type in your twitter search topic:', 250, 50);

  
  for (let i = 0; i < displayTableSize; i++) {

    fill(
      popDataTable[i].fontColorR,
      popDataTable[i].fontColorG,
      popDataTable[i].fontColorB);

    textSize(popDataTable[i].fontSize);
    if (popDataTable[i].name) {
      text(popDataTable[i].name,
        popDataTable[i].leftPosition, // from left 
        popDataTable[i].distanceFromTop);
    }
  }
}
